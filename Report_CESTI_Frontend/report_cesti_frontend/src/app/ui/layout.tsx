"use client";

import { usePathname } from "next/navigation";
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "../globals.css";
import React, { useCallback, useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@nextui-org/react";
import { motion } from "framer-motion";

const inter = Inter({ subsets: ["latin"] });
import { Open_Sans, Roboto_Mono } from "next/font/google";

const openSans = Open_Sans({
  subsets: ["latin"],
  display: "swap",
  //ðŸ‘‡ Add variable to our object
  variable: "--font-opensans",
});

//ðŸ‘‡ Configure the object for our second font
const robotoMono = Roboto_Mono({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-roboto-mono",
});

// export const metadata: Metadata = {
//     title: "Create Next App",
//     description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const pathName = usePathname();
  // // Hide Header on on scroll down
  // var didScroll = false;
  // var lastScrollTop = 0;
  // var delta = 5;
  // var navbarHeight = $('header').outerHeight();

  // $(window).scroll(function(event){
  //     didScroll = true;
  // });

  // setInterval(function() {
  //     if (didScroll) {
  //         hasScrolled();
  //         didScroll = false;
  //     }
  // }, 250);

  // function hasScrolled() {
  //     var st = $(this).scrollTop();

  //     // Make sure they scroll more than delta
  //     if(Math.abs(lastScrollTop - st) <= delta)
  //         return;

  //     // If they scrolled down and are past the navbar, add class .nav-up.
  //     // This is necessary so you never see what is "behind" the navbar.
  //     if (st > lastScrollTop && st > navbarHeight){
  //         // Scroll Down
  //         $('header').removeClass('nav-down').addClass('nav-up');
  //     } else {
  //         // Scroll Up
  //         if(st + $(window).height() < $(document).height()) {
  //             $('header').removeClass('nav-up').addClass('nav-down');
  //         }
  //     }

  //     lastScrollTop = st;
  // }
  // const [scrollYy, setScrollYy] = useState(0);
  const [top, setTop] = useState(10);
  const [hideHeader, setHideHeader] = useState(false);
  let scrollYy = 0;
  let sumOffset = 0;
  let check = false;
  const onScroll = useCallback(
    (event: any) => {
      const { pageYOffset, scrollY } = window;
      // console.log("yOffset", pageYOffset, "scrollY", scrollYy);
      // document.getElementById("header")
      // setHideHeader(true)
      // console.log(hideHeader)
      // if (pageYOffset < scrollYy) {
      //     setHideHeader(true)
      //     console.log(hideHeader)
      // }
      // const offset = pageYOffset - scrollYy
      // sumOffset -= offset
      // console.log(offset)
      // if (offset > 5) {
      //     sumOffset = sumOffset < -100 ? -100 : sumOffset
      //     if (!check) {
      //         console.log("up")
      //         setHideHeader(true)
      //         // document.getElementById("header_all")?.style.top  =
      //     }
      // }
      // else if (offset < 5) {
      //     sumOffset = sumOffset > 0 ? 0 : sumOffset
      //     if (check) {
      //         console.log("down")
      //         // document.getElementById("header_all")?.classList.remove("navup")
      //         setHideHeader(false)
      //         check = false
      //     }
      //     scrollYy = scrollY;
      // }
      // setTop(-sumOffset)
      if (pageYOffset < scrollYy) {
        setHideHeader(false);
      } else {
        setHideHeader(true);
      }
      scrollYy = pageYOffset;
      // console.log(sumOffset)
    },
    [scrollYy],
  );

  useEffect(() => {
    //add eventlistener to window
    window.addEventListener("scroll", onScroll, { passive: true });
    // remove event on unmount to prevent a memory leak with the cleanup
    return () => {
      window.removeEventListener("scroll", onScroll);
    };
  }, []);

  return (
    <html
      lang="vi"
      className={`${openSans.variable} ${robotoMono.variable} font-sans`}
    >
      <body>
        <div className="flex w-full flex-col bg-gray-200">
          <div
            id="header_all"
            className={`sticky z-50 top-0 flex h-fit w-full flex-row items-center justify-between bg-white ${hideHeader ? "navup" : ""}`}
          >
            <div className="flex w-3/5 flex-row items-center justify-between">
              <img
                src="/logocesti-chuan.jpeg"
                alt={"logo"}
                className="mx-5 h-1/4 w-48 max-w-none object-contain"
              ></img>
              <div className="h-vh flex flex-row justify-between">
                <Link
                  key="trang_chu"
                  href="/"
                  className={`link my-5 p-2 md:font-semibold ${pathName == "/" ? "text-blue-700" : "text-gray-500"}`}
                >
                  Trang chá»§
                </Link>
                <Link
                  key="gioi_thieu"
                  href="/gioi_thieu"
                  className={`my-5 p-2 md:font-semibold ${pathName == "/gioi_thieu" ? "text-blue-700" : "text-gray-500"}`}
                >
                  Giá»›i thiá»‡u
                </Link>
                <Link
                  key="hdsd"
                  href="/hdsd"
                  className={`my-5 p-2 md:font-semibold ${pathName == "/hdsd" ? "text-blue-700" : "text-gray-500"}`}
                >
                  HÆ°á»›ng dáº«n sá»­ dá»¥ng
                </Link>
              </div>
            </div>
            <Button
              color="default"
              className="mr-10 rounded-xl bg-blue-600 p-2 px-4 text-white"
            >
              Chá»©c nÄƒng khÃ¡c
            </Button>
          </div>
          {children}
        </div>
      </body>
    </html>
  );
}
